name 'base'
version '0.1'

using_library 'base-types'

# Common types that are not opaques
import_types_from "base/temperature.h"
import_types_from "base/time.h"
import_types_from "base/motion_command.h"
import_types_from "base/trajectory.h"
import_types_from "base/samples/frame.h"
import_types_from "base/samples/laser_scan.h"
import_types_from "base/samples/sonar_beam.h"
import_types_from "base/samples/pointcloud.h"
import_types_from "base/samples/distance_image.h"
import_types_from "base/actuators/status.h"
import_types_from "base/actuators/commands.h"
import_types_from "base/actuators/vehicles.h"

if has_library?('base-lib')
    using_library 'base-lib'
    # Opaque wrappers for Spline types
    import_types_from 'base/wrappers/geometry/spline.h'
end

# Opaque wrappers for Eigen types
import_types_from "base/wrappers/eigen.h"

if has_library?('base-lib')
    typekit.opaque_type '/base/geometry/Spline<3>', '/wrappers/geometry/Spline'
    typekit.opaque_type '/base/geometry/Spline<1>', '/wrappers/geometry/Spline'
end
typekit.opaque_type '/base/Vector2d', 'wrappers/Vector2d'
typekit.opaque_type '/base/Vector3d', 'wrappers/Vector3d'
typekit.opaque_type '/base/Vector4d', 'wrappers/Vector4d'
typekit.opaque_type '/base/Vector6d', 'wrappers/Vector6d'
typekit.opaque_type '/base/Quaterniond', 'wrappers/Quaterniond'
typekit.opaque_type '/base/Matrix2d', 'wrappers/Matrix2d'
typekit.opaque_type '/base/Matrix3d', 'wrappers/Matrix3d'
typekit.opaque_type '/base/Matrix4d', 'wrappers/Matrix4d'
typekit.opaque_type '/base/Matrix6d', 'wrappers/Matrix6d'
typekit.opaque_type '/base/MatrixXd', 'wrappers/MatrixXd'
typekit.opaque_type '/base/VectorXd', 'wrappers/VectorXd'
if has_library?('base-lib')
    import_types_from "base/geometry/spline.h"
end
import_types_from "base/pose.h"
import_types_from "base/waypoint.h"
import_types_from "base/samples/imu.h"
import_types_from "base/samples/rigid_body_state.h"
import_types_from "base/samples/rigid_body_acceleration.h"

max_sizes '/base/samples/RigidBodyState', 'sourceFrame' => 32, 'targetFrame' => 32

# Explicitely intanciate ro_ptr wrappers for Frame and FramePair as it is the
# standard way to push this kind of types on ports
typekit do
    roptr_frame_t     = ro_ptr('/base/samples/frame/Frame')
    roptr_framepair_t = ro_ptr('/base/samples/frame/FramePair')

    if type_export_policy == :used
        # We assume that, if the caller wants a 'used' type policy, it means he
        # wants partial exports. Move to 'selected'. oroGen would have changed
        # it to 'all'
        type_export_policy :selected
    end

    export_types roptr_frame_t,
        roptr_framepair_t,
        '/base/Pose',
        '/base/MotionCommand2D',
        '/base/SpeedCommand6D',
        '/base/Trajectory',
        '/std/vector</base/Trajectory>',
	'/base/samples/Pointcloud',
	'/base/samples/DistanceImage',
        '/base/samples/LaserScan',
        '/base/samples/SonarBeam',
        '/base/samples/frame/FramePair',
        '/base/samples/frame/frame_mode_t',
        '/base/samples/frame/Frame',
        '/base/samples/RigidBodyState',
        '/base/samples/RigidBodyAcceleration',
        '/base/samples/IMUSensors',
        '/base/actuators/Status',
        '/base/actuators/Command',
        '/base/AUVMotionCommand',
        '/base/AUVPositionCommand',
        '/base/geometry/Spline<1>',
        '/base/geometry/Spline<3>',
        '/base/Time',
        '/base/Position',
        '/std/vector</base/Vector3d>',
        '/std/vector</double>',
        '/base/Waypoint',
        '/std/vector</base/Waypoint>',
        '/std/vector</uint32_t>',
	'/base/Vector2d',
        '/base/Vector3d',
        '/base/Vector4d',
        '/base/Vector6d',
        '/base/VectorXd',
	'/base/Matrix3d',
        '/base/Matrix4d',
        '/base/Matrix6d',
        '/base/MatrixXd',
        '/base/Quaterniond',
        '/std/string',
        '/base/Angle',
	'/base/Temperature',
	'/std/vector</std/string>'
end

typekit.ros_mappings 'base/Time' => 'std_msgs/Time',
    'base/samples/frame/Frame' => 'sensor_msgs/Image'
